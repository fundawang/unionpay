<?php

/*
 * This file is licensed under GPLv2+.
*/

include_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'unionpay') . '/unionpay.inc');

/**
 * @file
 * Provides UnionPay interface for drupal.
 */

/**
 * Implementation of hook_help().
 */
function unionpay_help($path, $arg) {
	switch ($path) {
		case 'charge/unionpay':
			$output = '<b>'.t('FAQ on Unionpay').'</b><br/><ul>';
			$output.= '<li>'.t('You will need to register your mobile phone number at your bank if you want to pay via your card directly.').'</li>';
			$output.= '<li>'.t('Any questions, you may call 95516. Or, click <a href="@url" target="_blank">here</a>.',array('@url'=>'http://online.unionpay.com/static/help/index.html')).'</li>';
			$output.='</ul>';
			break;
		default: return;
	}
	return $output;
}

/**
 * Implementation of hook_menu().
 */
function unionpay_menu() {
	$items['admin/config/services/unionpay'] = array(
		'title' => 'Unionpay settings',
		'description' => 'Unionpay merchant settings.',
		'access arguments' => array('access administration pages'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('unionpay_admin_form'),
	);
	$items['charge/unionpay'] = array(
		'access callback' => 'unionpay_access',
		'type' => MENU_CALLBACK,
		'page callback' => 'unionpay_submit_form',
	);
	$items['charge/unionpay/response'] = array(
		'access callback' => 'unionpay_response_access',
		'type' => MENU_CALLBACK,
		'page callback' => 'unionpay_response',
	);
	$items['charge/unionpay/response_back'] = array(
		'access callback' => 'unionpay_response_access',
		'type' => MENU_CALLBACK,
		'page callback' => 'unionpay_response',
	);
	return $items;
}

/**
 * Implementation of hook_uninstall().
 */
function unionpay_uninstall() {
	$settings=array(
		'site_status', 'security_key', 'merid', 'merabbr'
	);
	foreach($settings as $s) {
		variable_del('unionpay_'.$s);
	}
}

function unionpay_admin_form($form, $form_state) {
	$form=array(
		'#submit' => array('unionpay_admin_form_submit'),
		'#validate' => array('unionpay_admin_form_validate'),
	);
	$form['site_status'] = array(
		'#type' => 'select',
		'#title' => t('Site status'),
		'#options' => array(
			'test' => t('Testing'),
			'production' => t('Production'),
		),
		'#default_value' => variable_get('unionpay_site_status', 'test'),
	);
	$form['merid'] = array(
		'#type' => 'textfield',
		'#title' => t('Merchant ID (@code)',array('@code'=>'merId')),
		'#default_value' => variable_get('unionpay_merid', '888888888888888'),
		'#maxlength' => 15,
		'#required' => TRUE,
	);
	$form['certid'] = array(
		'#type' => 'item',
		'#title' => t('Private Key Certificate ID currently using'),
		'#markup' => variable_get('unionpay_certid'),
		'#access' => variable_get('unionpay_certid', FALSE),
	);
	$form['private']=array(
		'#type' => 'fieldset',
		'#title' => t('Key used for sign requests'),
		'#description' => t('If you want to change current key, please reupload new private key file.'),
		'#collapsible' => TRUE,
		'#collapsed' => variable_get('unionpay_certid', FALSE),
	);
	if($form['private']['#collapsed']) unset($form['private']['#description']);
	$form['private']['privatekey'] = array(
		'#type' => 'managed_file',
		'#title' => t('Merchant Private Key File (.pfx)'),
		'#upload_validators' => array('file_validate_extensions' => array('pfx')),
		'#required' => !$form['private']['#collapsed'],
	);
	$form['private']['privatepw'] = array(
		'#type' => 'textfield',
		'#title' => t('Merchant Private Key password'),
		'#required' => !$form['private']['#collapsed'],
	);
	$form['public']=array(
		'#type' => 'fieldset',
		'#title' => t('Key used for verify response'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);
	$form['public']['publickey'] = array(
		'#type' => 'textarea',
		'#rows' => 28,
		'#default_value' => variable_get('unionpay_pubkey_for_unionpay',
			file_get_contents(DRUPAL_ROOT . '/' . drupal_get_path('module', 'unionpay') . '/verify_sign_acp.cer')),
		'#description' => t('The public key will be used to verify the signature of unionpay response. Leave blank to restore fallback settings.'),
	);
	return system_settings_form($form);
}

function unionpay_admin_form_validate($form, &$form_state) {
	if(!empty($form_state['values']['privatekey'])) {
		$file=file_load($form_state['values']['privatekey']);
		$t=new unionpay_frontpay($file->uri, $form_state['values']['privatepw']);
		$c=$t->getCertId();
		if(empty($c)) {
			form_set_error('privatekey', t('The private key and password you provided do not match.'));
			form_set_error('privatepw');
		}
		unset($t);
	}
}

function unionpay_admin_form_submit($form, $form_state) {
	$settings=array(
		'site_status', 'merid'
	);
	foreach($settings as $s) {
		variable_set('unionpay_'.$s,trim($form_state['values'][$s]));
	}

	if(!empty($form_state['values']['privatekey'])) {
		$file=file_load($form_state['values']['privatekey']);
		$t=new unionpay_frontpay($file->uri, $form_state['values']['privatepw']);
		file_delete($file);
		variable_set('unionpay_privatekey',$t->getPrivateKey());
		variable_set('unionpay_certid',$t->getCertId());
		unset($t);
	}

	if(empty($form_state['values']['publickey'])) {
		variable_set('unionpay_pubkey_for_unionpay',
			file_get_contents(DRUPAL_ROOT . '/' . drupal_get_path('module', 'unionpay') . '/verify_sign_acp.cer'));
	} else {
		variable_set('unionpay_pubkey_for_unionpay', $form_state['values']['publickey']);
	}
}

function unionpay_access() {
	if($_SERVER['REQUEST_METHOD']!=='POST') {
		return false;
	}
	return true;
}

function unionpay_response_access() {
	return TRUE;
	if($_SERVER['REQUEST_METHOD']!=='POST') {
		return false;
	}
	try {
		$response = new unionpay_response(variable_get('unionpay_pubkey_for_unionpay'), $_POST);
	} catch(Exception $exp) {
		watchdog('unionpay',
			'Critical error occured: @returnstr.', array(
				'@returnstr' => $exp->getMessage(),
			),
			WATCHDOG_CRITICAL
		);
		return FALSE;
	}
	
	if ($response->params['respCode'] != '00') {
		watchdog('unionpay',
			'Got Error @errcode => @errstr when receiving post result.', array(
				'@errcode' => $response->get('respCode'),
				'@errstr' => $response->get('respMsg')
			),
			WATCHDOG_ERROR
		);
		return FALSE;
	}
	unset($response);
	return TRUE;
}

function unionpay_paymentgatewayinfo() {
	return array(
		'unionpay' => array(
			'name' => t('Union Pay'),
			'url' => 'http://online.unionpay.com',
			'front'  => drupal_get_path('module', 'unionpay').'/unionpay-merchant.png',
			'payment' => drupal_get_path('module', 'unionpay').'/unionpay.png',
		),
	);
}

function unionpay_submit_form($form, $form_state) {
	return;
}

function unionpay_submit_form_submit($form, $form_state) {
	$param = array(
		'merId' => variable_get('unionpay_merid'),
		'frontUrl' => url('charge/unionpay/response', array('absolute'=>TRUE)),
		'backUrl' => url('charge/unionpay/response_back', array('absolute'=>TRUE)),
		'orderId' => $form_state['values']['orderno'],
		'txnTime' => date('YmdHis', $form_state['values']['ordertime']),
		'txnAmt' => $form_state['values']['amount']*100,
		'payTimeout' => date('YmdHis', time()+7200),
	);

	$upop = new unionpay_frontpay();
	$upop->setParams($param);

	return (string)$upop;
}

function unionpay_response() {
	module_invoke_all('gatewayreponse',array(
		'unionpay' => array(
			'orderno' => $_POST['orderId'],
			'amount' => $_POST['settleAmt']/100,
			'transactionno' => $_POST['queryId'],
			'settledate' => $_POST['settleDate'],
			'is_backend' => arg(2)=='response_back',
		),
	));
}

function unionpay_querystatus($orderno, $ordertime) {
	$param=array();
	$param['transType']     = quickpay_conf::CONSUME;   //交易类型
	$param['orderNumber']   = $orderno; //订单号
	$param['orderTime']     = date('YmdHis', $ordertime);   //订单时间
	$param['merId']         = variable_get('unionpay_merid', quickpay_conf::$pay_params['merId']);

	//提交查询
	$query  = new quickpay_service($param, quickpay_conf::QUERY);
	$ret    = $query->post();

	//返回查询结果
	try {
		$response = new quickpay_service($ret, quickpay_conf::RESPONSE);
	} catch(Exception $exp) {
		drupal_set_message(t('Critical error occured: @returnstr.',array('@returnstr'=>$exp->getMessage())), 'error');
		watchdog('unionpay',
			'Critical error occured: @returnstr.', array(
				'@returnstr' => $exp->getMessage(),
			),
			WATCHDOG_CRITICAL
		);
		return FALSE;
	}
	
	//后续处理
	$arr_ret = $response->get_args();

	$respCode = $response->get('respCode');
	$queryResult = $response->get('queryResult');
	
	switch($queryResult) {
		case quickpay_service::QUERY_FAIL:
			return onlinecharge_PAYMENT_FAILED;
		case quickpay_service::QUERY_INVALID:
			return onlinecharge_PAYMENT_INVALID;
		case quickpay_service::QUERY_WAIT:
			return onlinecharge_PAYMENT_PROCESSING;
		case quickpay_service::QUERY_SUCCESS:
			return array(
				'unionpay' => array(
					'orderno' => $orderno,
					'amount' => $response->get('settleAmount')/100,
					'transactionno' => $response->get('qid'),
					'settledate' => $response->get('settleDate'),
					'is_backend' => FALSE,
				),
			);
	}
	return FALSE;
}
?>
